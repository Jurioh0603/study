# 주석문
''' 다중라인 주석문
# python특징
인터프리터 언어 : 한 줄 읽고 실행
플랫폼 독립적
개발 생산성이 높다
동적 데이터 타입 지원 -> 실제 값이 변수에 저장될 때 정해짐
다양한 라이브러리, 모듈을 황용한 높은 확장성
'''
# 자료형 : 숫자, 문자열, 리스트, 튜플, 딕셔너리, 집합, 부울

a = 100; b = 100
print(a)
print(b)

a = a*9
print(a,b)

c, d = 10, 100
print(c, d)

# 동일한 초기값을 여러 변수에 할당
x = y = z = 123.5
print(x, y, z)

# 정적 데이터 타입 지원 -> 실제 값이 변수 저장될 때 정해진다.
# python의 모든 변수는 객체가 된다.
x = 100
print(type(x)) # <class 'int'>
y = '문자열'
print(type(y)) # <class 'str'>
z = 3.14
print(type(z)) # <class 'float'>
print(type(True)) # <class 'bool'> #bool타입은 대문자로 시작


# 리스트(p77) - 여러 개의 객체를 저장하는 순차적인 집합 자료형
# []를 사용
# -> 인덱스 활용, 인덱싱 + 슬라이싱

# 빈 list 선언
a = []
print(a) # []

# 자료형 : 숫자, 문자열, 리스트 튜플, 딕셔너리, 집합, 부울
x = [1,2,3]
print(type(x)) # <class 'list'>
x[0] = 100
print(x) # [100, 2, 3]
y = ['월요일','너무','피곤하다']; z = ['하나', 1, True, 3.14, x]
print(y) # ['월요일', '너무', '피곤하다']
print(z) # ['하나', 1, True, 3.14, [100, 2, 3]] # 타입 관계 없이 리스트에 담을 수 있다.
print(z[0]) # 하나


# typle(튜플) -교재 p89
# ()를 사용-(비교: list는 []를 사용)
# 생성과 삭제가능 but 수정은 불가 - (비교: list는 생성,삭제,수정가능하다)
a = 10, 20   # ()를 생략할 수 있다
print(a)  #(10, 20)
print(type(a))  #<class 'tuple'>

a2 = (110, 120)
print(a2)  #(110, 120)
print(type(a2))  #<class 'tuple'>

a2 = (110, 120,("a","b"))    # tuple안에  tuple을 저장할 수 있다
print(a2)  #(110, 120, ('a', 'b'))
print(type(a2))  #<class 'tuple'>

a3 = (111, 122,["a","b"])    # tuple안에  list을 저장할 수 있다
print(a3)  #(111, 122, ['a', 'b'])
print(type(a3))  #<class 'tuple'>

print(a3[0])  #111
print(a3[2]) #["a","b"]
print(a3[2][0])  #a     # 2차인덱싱

# 슬라이싱
a4 = ( "red", "green", "blue", "orange" )
   # 0     ,1       ,2      ,3
print(a4[1:3]) #['green', 'blue']  #1번부터 3번째 자리에 해당하는 값을 선택

print(a4)   #('red', 'green', 'blue', 'orange')
print(a4[0])  #red
print(a4[0:]) #'red', 'green', 'blue', 'orange')
print(a4[1:]) #('green', 'blue', 'orange')
print(a4[:])  #('red', 'green', 'blue', 'orange')
print(a4[:1])  #('red')
print(a4[:-1]) #('red', 'green', 'blue') # 마지막 1개 제외하고 출력
print(a4[:-2]) #('red', 'green')
print(a4[:-3]) #('red',)

# 빈 tuple생성
a5=()
print(a5)   #()

# 값 하나 넣기
a5(123)      # x
a5[0]=1230   #에러발생: TypeError: 'tuple' object does not support item assignment

# 요소1개의 값을 가진 tuple생성시에는 (값,)
a6=(123,)   #값 하나 넣기
print(a6)   #(123,)
print(type(a6))   #<class 'tuple'>

a6[0]=789   # x
print(a6)   # x

# 삭제
del a6[0]   #TypeError: 'tuple' object doesn't support item deletion

print( "삭제 전 전역변수:", globals().keys() )
# 삭제 전 전역변수: dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__',
# '__annotations__', '__builtins__', '__file__', '__cached__',
# 'a', 'b', 'c', 'd', 'x', 'y', 'z', 'a2', 'a3', 'a4', 'a5', 'a6'])

del a6  #삭제

#변수 조회
print( "삭제 후 전역변수:", globals().keys() )
# 전역변수: dict_keys(['__name__', '__doc__', '__package__', '__loader__', '__spec__',
# '__annotations__', '__builtins__', '__file__', '__cached__',
# 'a', 'b', 'c', 'd', 'x', 'y', 'z', 'a2', 'a3', 'a4', 'a5'])
